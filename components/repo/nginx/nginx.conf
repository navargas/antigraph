
events {
  worker_connections  1024;

}

http {
  upstream assetx {
    server repo_adapter:80;
  }

  upstream docker-registry {
    server registry:5000;
  }

  upstream auth {
    server authenticator:80;
  }

  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
    'registry/2.0' '';
    default registry/2.0;
  }

  server {
    rewrite_log on;
    error_log /var/log/nginx/error.log debug;
    listen 9090 ssl;
    # SSL
    ssl_certificate /ssl/cert.pem;
    ssl_certificate_key /ssl/privkey.pem;

    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;


    client_max_body_size 0; # disable any limits to avoid HTTP 413 for large image uploads
    chunked_transfer_encoding on;

    location /authforward {
      proxy_set_header  X-Original-URI    $request_uri;
      proxy_set_header  X-Original-Method $request_method;
      proxy_set_header  X-Original-User   $remote_user;
      proxy_set_header  X-Original-Addr   $remote_addr;
      proxy_pass        http://auth/uriauth;
    }

    location /v2/ {
      # To add basic authentication to v2 use auth_basic setting.

      ## If $docker_distribution_api_version is empty, the header will not be added.
      ## See the map directive above where this variable is defined.
      add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;
      auth_request /authforward;

      proxy_pass                          http://docker-registry;
      proxy_set_header  Host              $http_host;   # required for docker client's sake
      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_read_timeout                  900;
    }

    # Main asset location
    location ~ ^/assets/([^/]+)/([^/?]+)/ {
      if ($request_method = GET ) {
        rewrite ^/assets/([^/]+)/([^/?]+) /static/$1/$2/$http_X_API_KEY;
      }
      if ($request_method = POST ) {
        rewrite ^/assets/([^/]+)/([^/?]+) /upload/$1/$2/$http_X_API_KEY;
      }
    }

    # Rewrite url with no trailing slash
    location ~ ^/assets/([^/]+)/([^/?]+) {
        rewrite ^/assets/([^/]+)/([^/?]+) /assets/$1/$2/;
    }

    # All other repo locations
    location  /assets {
        proxy_pass http://assetx;
    }

    # Retrieve team info from key
    location /get_team_auth {
      proxy_pass http://assetx/assets/$asset/$version;
    }

    # Pass upload request to repo_adapter
    location ~ /upload/([^/]+)/([^/?]+)/([^/]+) {
      set $asset $1;
      set $version $2;
      set $key $3;
      proxy_pass http://assetx/assets/$asset/$version;
    }

    # Fetch filename from repo_adapter and serve file
    location ~ /static/([^/]+)/([^/?]+)/([^/]+) {
      set $asset $1;
      set $version $2;
      set $key $3;
      auth_request /get_team_auth;
      auth_request_set $team $upstream_http_X_AUTH_TEAM;
      auth_request_set $filename $upstream_http_X_AUTH_FILENAME;
      sendfile  on;
      add_header Content-Disposition 'attachment; filename="$filename"';
      alias /var/asset-data/$team/$asset/$version/$filename;
    }

    location / {
      proxy_pass http://coordinator:80;
    }
  }

  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;
  keepalive_timeout  65;

}
